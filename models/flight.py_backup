#!/usr/bin/python3

from haversine import haversine, inverse_haversine, haversine_vector, Unit 
import MySQLdb
from sys import argv


class flight:
    conn = MySQLdb.connect(host="localhost", user=argv[1], passwd=argv[2], db=argv[3], charset="utf8")
    cur = conn.cursor()

    def __init__(self, flight_id, origin, destination, arrived_at, route):
        self.flight_id = flight_id
        self.origin = origin
        self.destination = destination
        self.route = route
        self.arrived_at = arrived_at

    def print(self):
        print("Our flight is {} from {} to {} in # {} #\n".format(self.flight_id, self.origin, self.destination, self.route))

    def decimal(self):
        fixs = [self.origin] + [self.destination] + self.route.split()
        print(fixs[:])
        deci = []
        for i in range(2, len(fixs)):
            flight.cur.execute("SELECT lat, lon FROM decimalfixpoints WHERE name LIKE BINARY %s", (fixs[i],))
            row = flight.cur.fetchone()
            if row: 
                print(row)
                deci.append(row)
            elif fixs[i].isalpha():
                print("'{}' not found!!!".format(fixs[i]))
                deci.append('None')
            else:
                lat_deg = int(fixs[i][0:2])
                lat_min = int(fixs[i][2:4])
                lon_deg = int(fixs[i][5:8])
                lon_min = int(fixs[i][8:10])
                lat = round(lat_deg + (lat_min / 60), 3)
                lon = round(lon_deg + (lon_min / 60), 4)
                deci.append((lat, -lon))
                print((lat,-lon))
        return deci

    def gm(self, deci):
        if not 'None' in deci:
            if self.origin[:2] == "GM":
                flight.cur.execute("SELECT lat, lon FROM decimalfixpoints WHERE name LIKE BINARY %s", (self.origin,))
                row = flight.cur.fetchone()
                if row:
                    deci = [row] + deci
                else:
                    deci = ['None'] + deci
            if self.destination[:2] == "GM":
                flight.cur.execute("SELECT lat, lon FROM decimalfixpoints WHERE name LIKE BINARY %s", (self.destination,))
                row = flight.cur.fetchone()
                if row:
                    deci = deci + [row]
                else:
                    deci = deci + ['None']
        print(f"deci : {deci[:]}")
        return deci

    def direct(self, deci):
        direct_dist = 0
        if not 'None' in deci:
            print("Direct: {:.2f} NM".format(haversine(deci[0], deci[-1], unit='nmi')))
            direct_dist = haversine(deci[0], deci[-1], unit='nmi')
        return round(direct_dist, 2)
        
    def flown(self, deci):
        flown_dist = 0
        if not 'None' in deci:
            for j in range(0, (len(deci)-1)):
                print("{:.2f} NM".format(haversine(deci[j], deci[j+1], unit="nmi")))
                flown_dist += haversine(deci[j], deci[j+1], unit="nmi")
            print("Flown: {:.2f} NM".format(flown_dist))
        return round(flown_dist, 2)

    def kea(self, direct_dist, flown_dist):
        kea = ((flown_dist / direct_dist) - 1) * 100
        print("kea = {:.2f} %".format(kea))
        return round(kea, 2)

    def to_db(self, direct_dist, flown_dist, kea):
        flight.cur.execute("SELECT id  FROM flights WHERE arrived_at=%s AND route=%s",(self.arrived_at, self.route))
        row = flight.cur.fetchone()
        print(row[0], direct_dist, flown_dist, kea)
        flight.cur.execute("INSERT IGNORE INTO distances (id_flight, direct, flown, kea) VALUES(%s, %s, %s, %s)",(row[0], direct_dist, flown_dist, kea))
        flight.conn.commit()


"""Main Program"""
def main():
    conn = MySQLdb.connect(host="localhost", user=argv[1], passwd=argv[2], db=argv[3], charset="utf8")
    cur = conn.cursor()
    cur.execute("SELECT * FROM flights")
    query_rows = cur.fetchall()
    for row in query_rows:
        print(row[1], row[2], row[3], row[4], row[5])
        x = flight(row[1], row[2], row[3], row[4], row[5])
        tab = x.decimal()
        gm = x.gm(tab)
        d = x.direct(gm)
        f = x.flown(gm)
        if d and f:
            k = x.kea(d, f)
            x.to_db(d, f, k)
        print("------")

    print("------")
    """
    f = flight("TEST1", "GZEA", "GMXX", "MABAP FOBAC CSD")
    tab = f.decimal()
    gm = f.gm(tab)
    f.direct(gm)
    f.flown(gm)
    print("------")
    """
    cur.close()
    conn.close()

main()
